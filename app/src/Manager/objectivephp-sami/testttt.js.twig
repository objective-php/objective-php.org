{% from _self import element %}

window.projectVersion = '{{ project.version }}';

(function (root) {

    var bhIndex = null;
    var rootPath = '';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
        {% block search_index %}
        {% from _self import add_class_methods_index %}

        {% for ns in namespaces -%}
        {
            "type": "Namespace",
            "link": "{{ namespace_path(ns) }}",
            "name": "{{ ns|replace({'\\': '\\\\'})|raw }}",
            "doc": "Namespace {{ ns|replace({'\\': '\\\\'})|raw }}"
        },
        {%- endfor %}

        {% for class in interfaces -%}
        {
            "type": "Interface",
            {% if class.namespace %}"fromName": "{{ class.namespace|replace({'\\': '\\\\'})|raw }}",
            "fromLink": "{{ namespace_path(class.namespace)|raw }}",{% endif %}
            "link": "{{ class_path(class) }}",
            "name": "{{ class.name|replace({'\\': '\\\\'})|raw }}",
            "doc": "{{ class.shortdesc|desc(class)|json_encode }}"
        },
        {{ add_class_methods_index(class) }}
        {% endfor %}

        {% for class in classes -%}
        {
            "type": {% if class.isTrait %}"Trait",
            {% else %}"Class"{% endif %},
            {% if class.namespace %}"fromName": "{{ class.namespace|replace({'\\': '\\\\'})|raw }}",
            "fromLink": "{{ namespace_path(class.namespace) }}",{% endif %}
            "link": "{{ class_path(class) }}",
            "name": "{{ class.name|replace({'\\': '\\\\'})|raw }}",
            "doc": "{{ class.shortdesc|desc(class)|json_encode }}"
        },
        {{ add_class_methods_index(class) }}
        {% endfor %}

        {# Override this block, search_index_extra, to add custom search entries! #}
        {% block search_index_extra '' %}
        {% endblock %}
        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer (term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0, -1));

        return tokens;
    }

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function (term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function (term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function (matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function (ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function (type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

    };


    return root.Sami;
})(window);

$(function () {


    {% verbatim %}
        let form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    {% endverbatim %}
});

{% macro add_class_methods_index(class) %}
{% if class.methods %}
{% set from_name = class.name|replace({'\\': '\\\\'}) %}
{% set from_link = class_path(class) %}
{% for meth in class.methods %}
{
    "type"
:
    "Method", "fromName"
:
    "{{ from_name|raw }}", "fromLink"
:
    "{{ from_link|raw }}", "link"
:
    "{{ method_path(meth) }}", "name"
:
    "{{ meth|replace({'\\': '\\\\'})|raw }}", "doc"
:
    "{{ meth.shortdesc|desc(class)|json_encode }}"
},
{% endfor %}
{% endif %}
{% endmacro %}
